{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/sharankaur/BitFit/frontend/src/components/trophy.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport trophy_img from \"../images/trophy_1.png\";\nimport lock from \"../images/lock.png\";\nimport styles from \"../style/c_trophy\";\n\nvar Trophy_Component = function (_Component) {\n  _inherits(Trophy_Component, _Component);\n\n  var _super = _createSuper(Trophy_Component);\n\n  function Trophy_Component() {\n    var _this;\n\n    _classCallCheck(this, Trophy_Component);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.alertLocked = function () {\n      var message = _this.props.details.trophy_name;\n      var description = _this.props.details.description;\n      Alert.alert(message, description, [{\n        text: 'OK'\n      }], {\n        cancelable: false\n      });\n    };\n\n    _this.alertUnlocked = function () {\n      var message = 'Congrats on achieving ' + _this.props.details.trophy_name + \"!\";\n      var description = \"You have completed \" + _this.props.details.num_completed + \" workout(s)!\";\n      Alert.alert(message, description, [{\n        text: 'OK',\n        onPress: function onPress() {\n          return console.log('OK Pressed');\n        }\n      }], {\n        cancelable: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Trophy_Component, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          date_earned = _this$props.date_earned,\n          details = _this$props.details,\n          otherProps = _objectWithoutProperties(_this$props, [\"date_earned\", \"details\"]);\n\n      if (date_earned === \"\") {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 9\n          }\n        }, React.createElement(TouchableOpacity, {\n          onPress: this.alertLocked,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 11\n          }\n        }, React.createElement(Image, {\n          style: styles.lock,\n          source: {\n            uri: this.props.details.hidden_image\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }\n        })));\n      }\n\n      return React.createElement(TouchableOpacity, {\n        onPress: this.alertUnlocked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 7\n        }\n      }, React.createElement(Image, {\n        style: styles.trophy_img,\n        source: {\n          uri: this.props.details.displayed_image\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return Trophy_Component;\n}(Component);\n\nexport { Trophy_Component as default };","map":{"version":3,"sources":["/Users/sharankaur/BitFit/frontend/src/components/trophy.js"],"names":["React","Component","trophy_img","lock","styles","Trophy_Component","alertLocked","message","props","details","trophy_name","description","Alert","alert","text","cancelable","alertUnlocked","num_completed","onPress","console","log","date_earned","otherProps","uri","hidden_image","displayed_image"],"mappings":";;;;;;;;;;;;AAOA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;AAOA,OAAOC,UAAP;AACA,OAAOC,IAAP;AAGA,OAAOC,MAAP;;IAKqBC,gB;;;;;;;;;;;;;;;;UAGnBC,W,GAAc,YAAM;AAClB,UAAIC,OAAO,GAAG,MAAKC,KAAL,CAAWC,OAAX,CAAmBC,WAAjC;AACA,UAAIC,WAAW,GAAG,MAAKH,KAAL,CAAWC,OAAX,CAAmBE,WAArC;AACAC,MAAAA,KAAK,CAACC,KAAN,CACEN,OADF,EAEEI,WAFF,EAGE,CAAC;AAAEG,QAAAA,IAAI,EAAE;AAAR,OAAD,CAHF,EAIE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAJF;AAMD,K;;UAGDC,a,GAAgB,YAAM;AACpB,UAAIT,OAAO,GAAG,2BAA2B,MAAKC,KAAL,CAAWC,OAAX,CAAmBC,WAA9C,GAA4D,GAA1E;AACA,UAAIC,WAAW,GAAG,wBAAwB,MAAKH,KAAL,CAAWC,OAAX,CAAmBQ,aAA3C,GAA2D,cAA7E;AACAL,MAAAA,KAAK,CAACC,KAAN,CACEN,OADF,EAEEI,WAFF,EAGE,CAAC;AAAEG,QAAAA,IAAI,EAAE,IAAR;AAAcI,QAAAA,OAAO,EAAE;AAAA,iBAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAAA;AAAvB,OAAD,CAHF,EAIE;AAAEL,QAAAA,UAAU,EAAE;AAAd,OAJF;AAMD,K;;;;;;;6BAKQ;AAAA,wBAMH,KAAKP,KANF;AAAA,UAGLa,WAHK,eAGLA,WAHK;AAAA,UAILZ,OAJK,eAILA,OAJK;AAAA,UAKFa,UALE;;AASP,UAAID,WAAW,KAAK,EAApB,EAAwB;AACtB,eACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,gBAAD;AAAkB,UAAA,OAAO,EAAE,KAAKf,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,KAAD;AACE,UAAA,KAAK,EAAEF,MAAM,CAACD,IADhB;AAEE,UAAA,MAAM,EAAE;AAAEoB,YAAAA,GAAG,EAAE,KAAKf,KAAL,CAAWC,OAAX,CAAmBe;AAA1B,WAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF,CADF;AAUD;;AAGD,aACE,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE,KAAKR,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AACE,QAAA,KAAK,EAAEZ,MAAM,CAACF,UADhB;AAEE,QAAA,MAAM,EAAE;AAAEqB,UAAAA,GAAG,EAAE,KAAKf,KAAL,CAAWC,OAAX,CAAmBgB;AAA1B,SAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAQD;;;;EA5D2CxB,S;;SAAzBI,gB","sourcesContent":["/**\n * This is an Trophy image/button that is styled accordingly.\n *\n * Authors: Emily\n */\n\n// External imports\nimport React, { Component } from 'react';\nimport { TouchableOpacity, Image, View, Alert } from 'react-native';\n\n// Internal imports\n\n// Images\n// TODO\nimport trophy_img from \"../images/trophy_1.png\";\nimport lock from \"../images/lock.png\";\n\n// Stylesheet\nimport styles from \"../style/c_trophy\"\n\n/**\n * Class that returns a styled Trophy component.\n */\nexport default class Trophy_Component extends Component {\n\n  // Display a the progress to req for the trophies the user hasn't gained\n  alertLocked = () => {\n    let message = this.props.details.trophy_name;\n    let description = this.props.details.description;\n    Alert.alert(\n      message,\n      description,\n      [{ text: 'OK' }],\n      { cancelable: false }\n    );\n  }\n\n  // Display a description and trophy name for trophies the user has gained\n  alertUnlocked = () => {\n    let message = 'Congrats on achieving ' + this.props.details.trophy_name + \"!\";\n    let description = \"You have completed \" + this.props.details.num_completed + \" workout(s)!\";\n    Alert.alert(\n      message,\n      description,\n      [{ text: 'OK', onPress: () => console.log('OK Pressed') }],\n      { cancelable: false }\n    );\n  }\n\n  /**\n   * Displays the correct image on the front-end depending on if user has achieve trophy or not.\n   */\n  render() {\n    // Saving the props\n    const {\n      date_earned,\n      details,\n      ...otherProps\n    } = this.props;\n\n    // Display lock image if user has not earned trophy\n    if (date_earned === \"\") {\n      return (\n        <View>\n          <TouchableOpacity onPress={this.alertLocked}>\n            <Image\n              style={styles.lock}\n              source={{ uri: this.props.details.hidden_image }}\n            />\n          </TouchableOpacity>\n        </View>\n      )\n    }\n\n    // Display the trophy image\n    return (\n      <TouchableOpacity onPress={this.alertUnlocked}>\n        <Image\n          style={styles.trophy_img}\n          source={{ uri: this.props.details.displayed_image }}\n        />\n      </TouchableOpacity>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}