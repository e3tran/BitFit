{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/sharankaur/BitFit/frontend/src/routes/activitylog.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Actions } from 'react-native-router-flux';\nimport api from \"../config\";\nimport styles from \"../style/r_activitylog\";\nimport CompletedWorkout from \"../components/completed_workout\";\nimport LoadingScreen from \"../components/loading\";\nimport backButton from \"../images/back_button.png\";\n\nvar ActivityLog = function (_Component) {\n  _inherits(ActivityLog, _Component);\n\n  var _super = _createSuper(ActivityLog);\n\n  function ActivityLog(props) {\n    var _this;\n\n    _classCallCheck(this, ActivityLog);\n\n    _this = _super.call(this, props);\n\n    _this.goToProgress = function () {\n      Actions.pop();\n    };\n\n    _this.extractMostRecent = function () {\n      var workouts = [];\n      var i = 0;\n\n      for (var workout_id in _this.state.response) {\n        var data = {\n          data: _this.state.response[workout_id]\n        };\n        workouts.push(data);\n        i += 1;\n\n        if (i > 10) {\n          break;\n        }\n      }\n\n      _this.setState({\n        workouts: workouts\n      });\n    };\n\n    _this.state = {\n      workouts: [],\n      response: [],\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(ActivityLog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var url = 'workouts/get_completed_workouts';\n      var info = {\n        'uid': this.props.uid\n      };\n      api.post(url, info).then(function (response) {\n        _this2.setState({\n          response: response.data\n        });\n\n        _this2.extractMostRecent();\n\n        _this2.setState({\n          isLoading: false\n        });\n      }).catch(function (error) {\n        if (error.response) {\n          console.log(error.response.data);\n          console.log(error.response.status);\n        } else if (error.request) {\n          console.log(error.request);\n        } else {\n          console.log('Error', error.message);\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.state.isLoading) {\n        return React.createElement(LoadingScreen, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }\n        });\n      }\n\n      if (this.state.workouts.length === 0) {\n        return React.createElement(View, {\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 17\n          }\n        }, React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return _this3.goToProgress();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 21\n          }\n        }, React.createElement(Image, {\n          source: backButton,\n          style: styles.topButton,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }\n        })), React.createElement(Text, {\n          style: styles.header,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 21\n          }\n        }, \"Activity Log\"), React.createElement(Text, {\n          style: styles.header,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 21\n          }\n        }, \"No Workouts Completed!\"));\n      }\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return _this3.goToProgress();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }\n      }, React.createElement(Image, {\n        source: backButton,\n        style: styles.topButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }\n      })), React.createElement(Text, {\n        style: styles.header,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 17\n        }\n      }, \"Activity Log\"), React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }\n      }, React.createElement(FlatList, {\n        style: styles.flatList,\n        data: this.state.workouts,\n        keyExtractor: function keyExtractor(item) {\n          return item.workout_name;\n        },\n        renderItem: function renderItem(_ref) {\n          var workout = _ref.item;\n          return React.createElement(CompletedWorkout, {\n            workout: workout,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 29\n            }\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return ActivityLog;\n}(Component);\n\nexport { ActivityLog as default };","map":{"version":3,"sources":["/Users/sharankaur/BitFit/frontend/src/routes/activitylog.js"],"names":["React","Component","Actions","api","styles","CompletedWorkout","LoadingScreen","backButton","ActivityLog","props","goToProgress","pop","extractMostRecent","workouts","i","workout_id","state","response","data","push","setState","isLoading","url","info","uid","post","then","catch","error","console","log","status","request","message","length","container","topButton","header","flatList","item","workout_name","workout"],"mappings":"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","sourcesContent":["/**\n * The activity log page displays the last x completed workouts for the user.\n * \n * Authors: Imran\n */\n\n// External imports\nimport React, { Component } from 'react';\nimport { Text, View, FlatList, TouchableOpacity, Image } from \"react-native\";\nimport { Actions } from 'react-native-router-flux';\n\n// Internal imports\nimport api from '../config'\n\n// Stylesheet\nimport styles from '../style/r_activitylog';\n\n// Components\nimport CompletedWorkout from \"../components/completed_workout\"\nimport LoadingScreen from \"../components/loading\"\n\n// Images\nimport backButton from '../images/back_button.png'\n\n/**\n * Class that returns the the Activity Log page with the workouts rendered\n */\nexport default class ActivityLog extends Component {\n    // Call the super constructor and initalize a state variable\n    constructor(props) {\n        super(props)\n        this.state = { workouts: [], response: [], isLoading: true };\n    }\n\n    // Route to the progress page when progress button is pressed\n    goToProgress = () => {\n        Actions.pop()\n    }\n\n    // Creates a new state variable that contains a list of reformatted workout objects of size x\n    extractMostRecent = () => {\n        // Store the reformatted workout objects in this list\n        var workouts = []\n        // Counter for number of workouts to display\n        var i = 0\n        // Iterate through each completed workout for this user\n        for (var workout_id in this.state.response) {\n            // Reformat the workout object and store into a list\n            let data = { data: this.state.response[workout_id] }\n            workouts.push(data)\n\n            // Increment the counter and check if gathered enough exercises\n            i += 1\n            if (i > 10) { break; }\n        }\n\n        // Set a state variable containing the new formatted workout objects\n        this.setState(\n            { workouts: workouts }\n        )\n    }\n\n    // Makes the Axios call get the completed workouts for this user, then calls function to parse it\n    componentDidMount() {\n        // Indicate which API to call and what data to pass in\n        let url = 'workouts/get_completed_workouts';\n        let info = {\n            'uid': this.props.uid\n        };\n        // Make API call\n        api.post(url, info)\n            // Success\n            .then(response => {\n                // Save the list of trophies returned and now loading screen can be removed\n                this.setState({\n                    response: response.data,\n                })\n                // Make the call to select completed workouts and reformat them\n                this.extractMostRecent()\n                // now loading screen can be removed\n                this.setState({\n                    isLoading: false\n                })\n\n            })\n\n            // Error\n            .catch(error => {\n                // Log error \n                if (error.response) {\n                    // Call was unsuccessful\n                    console.log(error.response.data);\n                    console.log(error.response.status);\n                } else if (error.request) {\n                    // Request was made but no response was received.\n                    console.log(error.request);\n                } else {\n                    // Something else cause an error\n                    console.log('Error', error.message);\n                }\n            });\n    }\n\n    render() {\n        // If the API call is not complete, display the loading screen\n        if (this.state.isLoading) {\n            return (\n                <LoadingScreen></LoadingScreen>\n            )\n        }\n\n        if (this.state.workouts.length === 0) {\n            return (\n                <View style={styles.container}>\n                    <TouchableOpacity onPress={() => this.goToProgress()}>\n                        <Image source={backButton} style={styles.topButton} />\n                    </TouchableOpacity>\n                    <Text style={styles.header}>\n                        Activity Log\n                </Text>\n                    <Text style={styles.header}>\n                        No Workouts Completed!\n                    </Text>\n                </View>\n            );\n        }\n\n        return (\n            <View style={styles.container}>\n                <TouchableOpacity onPress={() => this.goToProgress()}>\n                    <Image source={backButton} style={styles.topButton} />\n                </TouchableOpacity>\n                <Text style={styles.header}>\n                    Activity Log\n                </Text>\n                <View>\n                    <FlatList\n                        style={styles.flatList}\n                        data={this.state.workouts}\n                        keyExtractor={item => item.workout_name}\n                        renderItem={({ item: workout }) => (\n                            <CompletedWorkout workout={workout}></CompletedWorkout>\n                        )}\n                    />\n                </View>\n\n            </View >\n        );\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}