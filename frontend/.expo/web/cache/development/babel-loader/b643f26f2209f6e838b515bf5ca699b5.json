{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/sharankaur/BitFit/frontend/src/routes/timer.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Actions } from 'react-native-router-flux';\nimport api from \"../config\";\nimport Clock from \"../components/timer_components/clock\";\nimport ButtonsRow from \"../components/timer_components/button_row\";\nimport RoundButton from \"../components/timer_components/round_button\";\nimport styles from \"../style/r_timer\";\n\nvar WorkoutTimer = function (_Component) {\n  _inherits(WorkoutTimer, _Component);\n\n  var _super = _createSuper(WorkoutTimer);\n\n  function WorkoutTimer(props) {\n    var _this;\n\n    _classCallCheck(this, WorkoutTimer);\n\n    _this = _super.call(this, props);\n\n    _this.goToStats = function (duration) {\n      console.log(\"In goToStats()...\");\n      Actions.stats({\n        uid: _this.props.uid,\n        duration: duration,\n        focus: _this.props.focus,\n        workout: _this.props.workout,\n        leveledUp: _this.props.leveledUp\n      });\n    };\n\n    _this.get_body_parts = function () {\n      var url = 'bodyparts/get_body_parts';\n      api.post(url).then(function (response) {\n        var body_parts = {};\n\n        for (var body_part_id in response.data) {\n          body_parts[response.data[body_part_id].body_part_name] = body_part_id;\n        }\n\n        _this.setState({\n          body_parts: body_parts\n        });\n\n        console.log(\"In get_body_parts()...\");\n\n        _this.getStats();\n      }).catch(function (error) {\n        if (error.response) {\n          console.log(error.response.data);\n          console.log(error.response.status);\n        } else if (error.request) {\n          console.log(error.request);\n        } else {\n          console.log('Error', error.message);\n        }\n      });\n    };\n\n    _this.start = function () {\n      var now = new Date().getTime();\n\n      _this.setState({\n        start: now,\n        now: now,\n        laps: [0]\n      });\n\n      _this.timer = setInterval(function () {\n        _this.setState({\n          now: new Date().getTime()\n        });\n      }, 100);\n    };\n\n    _this.updateStats = function (exp, level, duration) {\n      var body_part_id = _this.state.body_parts[_this.props.focus];\n      var url = 'progress/update_stats';\n      var data = {\n        'uid': _this.props.uid,\n        'body_part_id': body_part_id,\n        'exp': exp,\n        'level': level\n      };\n      api.post(url, data).then(function (response) {\n        console.log(\"In updateStats()...\");\n\n        _this.goToStats(duration);\n      }).catch(function (error) {\n        console.log(\"Update progress call error\");\n        alert(error.message);\n      });\n    };\n\n    _this.calculateStats = function (exp, level) {\n      var _this$state = _this.state,\n          laps = _this$state.laps,\n          now = _this$state.now,\n          start = _this$state.start;\n      var timer = now - start;\n      var duration = parseFloat(((laps.reduce(function (total, curr) {\n        return total + curr;\n      }, 0) + timer) / 1000 / 3600).toFixed(2));\n      var leveledUp = false;\n      exp = exp + duration;\n\n      if (level == 0) {\n        if (exp >= 1) {\n          level = 1;\n\n          while (exp >= Math.pow(level + 1, 2) - level) {\n            level = level + 1;\n            leveledUp = true;\n          }\n        }\n      } else {\n        while (exp >= Math.pow(level + 1, 2) - level) {\n          level = level + 1;\n          leveledUp = true;\n        }\n      }\n\n      console.log(\"In calculateStats()...\");\n\n      _this.updateStats(exp, level, duration);\n    };\n\n    _this.getStats = function () {\n      var body_part_id = _this.state.body_parts[_this.props.focus];\n      var url = 'progress/get';\n      var data = {\n        'uid': _this.props.uid\n      };\n      api.post(url, data).then(function (response) {\n        var level = response.data[body_part_id].level;\n        var exp = response.data[body_part_id].exp;\n        console.log(\"In getStats()...\");\n\n        _this.calculateStats(exp, level);\n      }).catch(function (error) {\n        console.log(\"Get progress call error\");\n        alert(error.message);\n      });\n    };\n\n    _this.finish = function () {\n      console.log(\"In Finish...\");\n\n      _this.get_body_parts();\n    };\n\n    _this.pause = function () {\n      clearInterval(_this.timer);\n      var _this$state2 = _this.state,\n          laps = _this$state2.laps,\n          now = _this$state2.now,\n          start = _this$state2.start;\n\n      var _laps = _slicedToArray(laps, 1),\n          firstLap = _laps[0];\n\n      _this.setState({\n        laps: [firstLap + now - start],\n        start: 0,\n        now: 0\n      });\n    };\n\n    _this.reset = function () {\n      _this.setState({\n        laps: [],\n        start: 0,\n        now: 0\n      });\n    };\n\n    _this.resume = function () {\n      var now = new Date().getTime();\n\n      _this.setState({\n        start: now,\n        now: now\n      });\n\n      _this.timer = setInterval(function () {\n        _this.setState({\n          now: new Date().getTime()\n        });\n      }, 100);\n    };\n\n    _this.goToProgress = function () {\n      Actions.progress({\n        uid: _this.props.uid\n      });\n    };\n\n    _this.state = {\n      start: 0,\n      now: 0,\n      laps: [],\n      body_parts: {}\n    };\n    return _this;\n  }\n\n  _createClass(WorkoutTimer, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.timer);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state3 = this.state,\n          now = _this$state3.now,\n          start = _this$state3.start,\n          laps = _this$state3.laps;\n      var timer = now - start;\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }\n      }, React.createElement(Clock, {\n        interval: laps.reduce(function (total, curr) {\n          return total + curr;\n        }, 0) + timer,\n        style: styles.timer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 17\n        }\n      }), React.createElement(Text, {\n        style: {\n          color: '#FFFFFF',\n          fontSize: 24\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 17\n        }\n      }, this.props.workout), React.createElement(Text, {\n        style: {\n          color: '#FFFFFF'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 17\n        }\n      }, this.props.focus), laps.length === 0 && React.createElement(ButtonsRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }\n      }, React.createElement(RoundButton, {\n        title: \"Finish\",\n        color: \"#8B8B90\",\n        background: \"#151515\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 25\n        }\n      }), React.createElement(RoundButton, {\n        title: \"Start\",\n        color: \"#50D167\",\n        background: \"#1B361F\",\n        onPress: this.start,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 25\n        }\n      })), start > 0 && React.createElement(ButtonsRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }\n      }, React.createElement(RoundButton, {\n        title: \"Finish\",\n        color: \"#FFFFFF\",\n        background: \"#3D3D3D\",\n        onPress: this.finish,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 25\n        }\n      }), React.createElement(RoundButton, {\n        title: \"Pause\",\n        color: \"#E33935\",\n        background: \"#3C1715\",\n        onPress: this.pause,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 25\n        }\n      })), laps.length > 0 && start === 0 && React.createElement(ButtonsRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 25\n        }\n      }, React.createElement(RoundButton, {\n        title: \"Finish\",\n        color: \"#FFFFFF\",\n        background: \"#3D3D3D\",\n        onPress: this.finish,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 29\n        }\n      }), React.createElement(RoundButton, {\n        title: \"Resume\",\n        color: \"#50D167\",\n        background: \"#1B361F\",\n        onPress: this.resume,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 29\n        }\n      })), React.createElement(View, {\n        style: {\n          paddingTop: 110\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 17\n        }\n      }, React.createElement(Button, {\n        title: \"Cancel Workout\",\n        color: \"#E33935\",\n        onPress: this.goToProgress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return WorkoutTimer;\n}(Component);\n\nexport { WorkoutTimer as default };","map":{"version":3,"sources":["/Users/sharankaur/BitFit/frontend/src/routes/timer.js"],"names":["React","Component","Actions","api","Clock","ButtonsRow","RoundButton","styles","WorkoutTimer","props","goToStats","duration","console","log","stats","uid","focus","workout","leveledUp","get_body_parts","url","post","then","response","body_parts","body_part_id","data","body_part_name","setState","getStats","catch","error","status","request","message","start","now","Date","getTime","laps","timer","setInterval","updateStats","exp","level","state","alert","calculateStats","parseFloat","reduce","total","curr","toFixed","Math","pow","finish","pause","clearInterval","firstLap","reset","resume","goToProgress","progress","container","color","fontSize","length","paddingTop"],"mappings":"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","sourcesContent":["/**\r\n * The timer page allows the user to time their workouts. Also calculates progress.\r\n * Timer has start, pause, resume, cancel, and finish functionality.\r\n * Clicking finish will update progress and take you to the stats page.\r\n * \r\n * Authors: Steven, Jeremy\r\n */\r\n\r\n// External Imports\r\nimport React, { Component } from 'react';\r\nimport { View, Button, Text } from 'react-native';\r\nimport { Actions } from 'react-native-router-flux';\r\n\r\n// internal imports (useful components)\r\nimport api from '../config'\r\nimport Clock from '../components/timer_components/clock';\r\nimport ButtonsRow from '../components/timer_components/button_row';\r\nimport RoundButton from '../components/timer_components/round_button';\r\n\r\n// Stylesheet\r\nimport styles from '../style/r_timer';\r\n\r\n/**\r\n * Renders the timer page, and handles calculation of leveling\r\n */\r\nexport default class WorkoutTimer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            start: 0,\r\n            now: 0,\r\n            laps: [],\r\n            body_parts: {}\r\n        }\r\n    }\r\n\r\n    // reset timer (currently not interacting with back button)\r\n    componentWillUnmount() {\r\n        clearInterval(this.timer)\r\n    }\r\n\r\n    goToStats = (duration) => {\r\n        console.log(\"In goToStats()...\")\r\n        Actions.stats({\r\n            uid: this.props.uid,\r\n            duration: duration,\r\n            focus: this.props.focus,\r\n            workout: this.props.workout,\r\n            leveledUp: this.props.leveledUp\r\n        });\r\n\r\n    }\r\n\r\n    get_body_parts = () => {\r\n        // Indicate which API to call and what data to pass in\r\n        let url = 'bodyparts/get_body_parts';\r\n        api.post(url)\r\n            // Success\r\n            .then(response => {\r\n                let body_parts = {}\r\n                for (var body_part_id in response.data) {\r\n                    body_parts[response.data[body_part_id].body_part_name] = body_part_id;\r\n                }\r\n\r\n                this.setState({\r\n                    body_parts: body_parts,\r\n                })\r\n                console.log(\"In get_body_parts()...\")\r\n                this.getStats()\r\n            })\r\n            .catch(error => {\r\n                // Log error \r\n                if (error.response) {\r\n                    // Call was unsuccessful\r\n                    console.log(error.response.data);\r\n                    console.log(error.response.status);\r\n                } else if (error.request) {\r\n                    // Request was made but no response was received.\r\n                    console.log(error.request);\r\n                } else {\r\n                    // Something else cause an error\r\n                    console.log('Error', error.message);\r\n                }\r\n            });\r\n    }\r\n\r\n    // Describe what each button does\r\n    start = () => {\r\n        const now = new Date().getTime()\r\n        this.setState({\r\n            start: now,\r\n            now,\r\n            laps: [0],\r\n        })\r\n        this.timer = setInterval(() => {\r\n            this.setState({ now: new Date().getTime() })\r\n        }, 100)\r\n    }\r\n\r\n    updateStats = (exp, level, duration) => {\r\n        let body_part_id = this.state.body_parts[this.props.focus]\r\n\r\n        /**\r\n         * Save progress in backend\r\n         */\r\n        let url = 'progress/update_stats';\r\n        let data = {\r\n            'uid': this.props.uid,\r\n            'body_part_id': body_part_id,\r\n            'exp': exp,\r\n            'level': level\r\n        };\r\n        api.post(url, data)\r\n            .then(response => {\r\n                // console.log(response.data)\r\n                console.log(\"In updateStats()...\")\r\n                this.goToStats(duration)\r\n            })\r\n\r\n            .catch((error) => {\r\n                console.log(\"Update progress call error\");\r\n                alert(error.message);\r\n            });\r\n    }\r\n\r\n    calculateStats = (exp, level) => {\r\n        const { laps, now, start } = this.state;\r\n        const timer = now - start;\r\n        // calculates the duration of the workout in hours rounded to 2 decimal places\r\n        const duration = parseFloat(((laps.reduce((total, curr) => total + curr, 0) + timer) / 1000 / 3600).toFixed(2));\r\n        let leveledUp = false;\r\n\r\n        exp = exp + duration;\r\n\r\n        // calculate the new level\r\n        if (level == 0) {\r\n            if (exp >= 1) {\r\n                level = 1;\r\n                while ( exp >= (Math.pow((level+1), 2) - (level)) ) {\r\n                    level = level + 1;\r\n                    leveledUp = true;\r\n                }\r\n            }\r\n        } else {\r\n            while ( exp >= (Math.pow((level+1), 2) - (level)) ) {\r\n                level = level + 1;\r\n                leveledUp = true;\r\n            }\r\n        }\r\n        console.log(\"In calculateStats()...\")\r\n        this.updateStats(exp, level, duration)\r\n    }\r\n\r\n    getStats = () => {\r\n        let body_part_id = this.state.body_parts[this.props.focus]\r\n        let url = 'progress/get';\r\n        let data = {\r\n            'uid': this.props.uid\r\n        };\r\n\r\n        api.post(url, data)\r\n            // Success\r\n            .then(response => {\r\n                // need to come back here and make sure user actually has focus defined\r\n                let level = response.data[body_part_id].level;\r\n                let exp = response.data[body_part_id].exp;\r\n                console.log(\"In getStats()...\")\r\n                this.calculateStats(exp, level)\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Get progress call error\");\r\n                alert(error.message);\r\n            })\r\n    }\r\n\r\n    // ends the workout and calculate levels\r\n    finish = () => {\r\n        console.log(\"In Finish...\")\r\n        this.get_body_parts()\r\n    }\r\n\r\n    // pause timer\r\n    pause = () => {\r\n        clearInterval(this.timer)\r\n        const { laps, now, start } = this.state\r\n        const [firstLap] = laps\r\n        // save current time elapsed\r\n        this.setState({\r\n            laps: [firstLap + now - start],\r\n            start: 0,\r\n            now: 0,\r\n        })\r\n    }\r\n\r\n    // reset timer\r\n    reset = () => {\r\n        this.setState({\r\n            laps: [],\r\n            start: 0,\r\n            now: 0,\r\n        })\r\n    }\r\n\r\n    // restart timer\r\n    resume = () => {\r\n        const now = new Date().getTime()\r\n        this.setState({\r\n            start: now,\r\n            now,\r\n        })\r\n        this.timer = setInterval(() => {\r\n            this.setState({ now: new Date().getTime() })\r\n        }, 100)\r\n    }\r\n\r\n    // return to home page on cancel button\r\n    goToProgress = () => {\r\n        Actions.progress({ uid: this.props.uid })\r\n    }\r\n\r\n    // renders the clock components and all the timer buttons\r\n    render() {\r\n        const { now, start, laps } = this.state\r\n        const timer = now - start\r\n        return (\r\n            <View style={styles.container} >\r\n                <Clock\r\n                    interval={laps.reduce((total, curr) => total + curr, 0) + timer}\r\n                    style={styles.timer}\r\n                />\r\n                <Text style={{ color: '#FFFFFF', fontSize: 24 }}>{this.props.workout}</Text>\r\n                <Text style={{ color: '#FFFFFF' }}>{this.props.focus}</Text>\r\n                {laps.length === 0 && (\r\n                    <ButtonsRow>\r\n                        <RoundButton\r\n                            title='Finish'\r\n                            color='#8B8B90'\r\n                            background='#151515'\r\n                            disabled\r\n                        />\r\n                        <RoundButton\r\n                            title='Start'\r\n                            color='#50D167'\r\n                            background='#1B361F'\r\n                            onPress={this.start}\r\n                        />\r\n                    </ButtonsRow>\r\n                )\r\n                }\r\n                {start > 0 && (\r\n                    <ButtonsRow>\r\n                        <RoundButton\r\n                            title='Finish'\r\n                            color='#FFFFFF'\r\n                            background='#3D3D3D'\r\n                            onPress={this.finish}\r\n                        />\r\n                        <RoundButton\r\n                            title='Pause'\r\n                            color='#E33935'\r\n                            background='#3C1715'\r\n                            onPress={this.pause}\r\n                        />\r\n                    </ButtonsRow>\r\n                )}\r\n                {\r\n                    laps.length > 0 && start === 0 && (\r\n                        <ButtonsRow>\r\n                            <RoundButton\r\n                                title='Finish'\r\n                                color='#FFFFFF'\r\n                                background='#3D3D3D'\r\n                                onPress={this.finish}\r\n                            />\r\n                            <RoundButton\r\n                                title='Resume'\r\n                                color='#50D167'\r\n                                background='#1B361F'\r\n                                onPress={this.resume}\r\n                            />\r\n                        </ButtonsRow>\r\n                    )\r\n                }\r\n                <View style={{ paddingTop: 110 }}>\r\n                    <Button\r\n                        title='Cancel Workout'\r\n                        color='#E33935'\r\n                        onPress={this.goToProgress}\r\n                    />\r\n                </View>\r\n            </View >\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}