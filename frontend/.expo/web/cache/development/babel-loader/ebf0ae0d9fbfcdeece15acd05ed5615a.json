{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/sharankaur/BitFit/frontend/src/components/timer_components/round_button.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport styles from \"../../style/r_timer\";\n\nvar RoundButton = function (_Component) {\n  _inherits(RoundButton, _Component);\n\n  var _super = _createSuper(RoundButton);\n\n  function RoundButton(props) {\n    _classCallCheck(this, RoundButton);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(RoundButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var color = this.props.color;\n      return React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return !_this.props.disabled && _this.props.onPress();\n        },\n        style: [styles.button, {\n          backgroundColor: this.props.background\n        }],\n        activeOpacity: this.props.disabled ? 1.0 : 0.7,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: styles.buttonBorder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: [styles.buttonTitle, {\n          color: color\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }\n      }, this.props.title)));\n    }\n  }]);\n\n  return RoundButton;\n}(Component);\n\nexport { RoundButton as default };","map":{"version":3,"sources":["/Users/sharankaur/BitFit/frontend/src/components/timer_components/round_button.js"],"names":["React","Component","styles","RoundButton","props","color","disabled","onPress","button","backgroundColor","background","buttonBorder","buttonTitle","title"],"mappings":";;;;;;;;;;;AAMA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAIA,OAAOC,MAAP;;IAKqBC,W;;;;;AACjB,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA,6BACTA,KADS;AAElB;;;;6BAEQ;AAAA;;AACL,UAAMC,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAzB;AACA,aACI,oBAAC,gBAAD;AACI,QAAA,OAAO,EAAE;AAAA,iBAAM,CAAC,KAAI,CAACD,KAAL,CAAWE,QAAZ,IAAwB,KAAI,CAACF,KAAL,CAAWG,OAAX,EAA9B;AAAA,SADb;AAEI,QAAA,KAAK,EAAE,CAACL,MAAM,CAACM,MAAR,EAAgB;AAAEC,UAAAA,eAAe,EAAE,KAAKL,KAAL,CAAWM;AAA9B,SAAhB,CAFX;AAGI,QAAA,aAAa,EAAE,KAAKN,KAAL,CAAWE,QAAX,GAAsB,GAAtB,GAA4B,GAH/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEJ,MAAM,CAACS,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACT,MAAM,CAACU,WAAR,EAAqB;AAAEP,UAAAA,KAAK,EAALA;AAAF,SAArB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+C,KAAKD,KAAL,CAAWS,KAA1D,CADJ,CALJ,CADJ;AAWH;;;;EAlBoCZ,S;;SAApBE,W","sourcesContent":["/**\r\n * Used for the start/end/reset buttons on the timer page. \r\n * They're organized as set of 2 in a ButtonRow component.\r\n * \r\n * Authors: Steven\r\n */\r\nimport React, { Component } from 'react';\r\nimport { Text, View, TouchableOpacity } from 'react-native';\r\n\r\n// Stylesheet\r\nimport styles from '../../style/r_timer';\r\n\r\n/**\r\n * Round buttons for timer page\r\n */\r\nexport default class RoundButton extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        const color = this.props.color;\r\n        return (\r\n            <TouchableOpacity\r\n                onPress={() => !this.props.disabled && this.props.onPress()}\r\n                style={[styles.button, { backgroundColor: this.props.background }]}\r\n                activeOpacity={this.props.disabled ? 1.0 : 0.7}\r\n            >\r\n                <View style={styles.buttonBorder}>\r\n                    <Text style={[styles.buttonTitle, { color }]}>{this.props.title}</Text>\r\n                </View>\r\n            </TouchableOpacity>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}