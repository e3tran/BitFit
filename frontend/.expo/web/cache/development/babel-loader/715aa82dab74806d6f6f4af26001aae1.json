{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/sharankaur/BitFit/frontend/src/components/button.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport styles from \"../style/c_button\";\n\nvar Button = function (_Component) {\n  _inherits(Button, _Component);\n\n  var _super = _createSuper(Button);\n\n  function Button() {\n    _classCallCheck(this, Button);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          label = _this$props.label,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          hide = _this$props.hide;\n      var style = disabled ? [styles.buttonContainer, styles.disabled] : styles.buttonContainer;\n      return hide ? null : React.createElement(TouchableOpacity, {\n        disabled: disabled,\n        style: style,\n        onPress: onPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: styles.text,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }\n      }, label));\n    }\n  }]);\n\n  return Button;\n}(Component);\n\nexport { Button as default };","map":{"version":3,"sources":["/Users/sharankaur/BitFit/frontend/src/components/button.js"],"names":["React","Component","styles","Button","props","label","disabled","onPress","hide","style","buttonContainer","text"],"mappings":";;;;;;;;;;;AAOA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAIA,OAAOC,MAAP;;IAKqBC,M;;;;;;;;;;;;;6BAER;AAAA,wBACsC,KAAKC,KAD3C;AAAA,UACGC,KADH,eACGA,KADH;AAAA,UACUC,QADV,eACUA,QADV;AAAA,UACoBC,OADpB,eACoBA,OADpB;AAAA,UAC6BC,IAD7B,eAC6BA,IAD7B;AAEL,UAAMC,KAAK,GAAGH,QAAQ,GAAG,CAACJ,MAAM,CAACQ,eAAR,EAAyBR,MAAM,CAACI,QAAhC,CAAH,GAA+CJ,MAAM,CAACQ,eAA5E;AAIA,aAAOF,IAAI,GAAG,IAAH,GACP,oBAAC,gBAAD;AAAkB,QAAA,QAAQ,EAAEF,QAA5B;AAAsC,QAAA,KAAK,EAAEG,KAA7C;AAAoD,QAAA,OAAO,EAAEF,OAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEL,MAAM,CAACS,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2BN,KAA3B,CADJ,CADJ;AAKH;;;;EAb+BJ,S;;SAAfE,M","sourcesContent":["/**\n * This is an internal button component that uses Touchable opacity and Text.\n * \n * Authors: ?\n */\n\n// External Imports\nimport React, { Component } from 'react';\nimport {Text, TouchableOpacity } from \"react-native\";\n\n// Internal Imports\nimport styles from \"../style/c_button\";\n\n/**\n * Class that returns a Touchable Opacity object with the correct style and text.\n */\nexport default class Button extends Component {\n    // save the props from when the button is rendered\n    render() {\n        const { label, disabled, onPress, hide } = this.props;\n        const style = disabled ? [styles.buttonContainer, styles.disabled] : styles.buttonContainer\n    \n        // return a touchable opacity button that inherits functionality, and is styled\n        // in this file\n        return hide ? null : (\n            <TouchableOpacity disabled={disabled} style={style} onPress={onPress}>\n                <Text style={styles.text}>{label}</Text>\n            </TouchableOpacity>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}